from flask import Flask, request, jsonify, send_from_directory, Response
import os
import json
import requests
import subprocess
import platform
import signal
import time
import threading
import psutil
from threading import Lock
from flask_cors import CORS

app = Flask(__name__, static_folder='.', static_url_path='')
CORS(app, resources={r"/*": {"origins": "*"}})

 
CHATS_DIR = "chats"
os.makedirs(CHATS_DIR, exist_ok=True)

LAST_MODEL_FILE = 'last_model.txt'
SETTINGS_FILE = 'settings.json'

 
if os.path.exists(SETTINGS_FILE):
    try:
        with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
            settings = json.load(f)
    except json.decoder.JSONDecodeError:
        settings = {"language": "en", "default_model": ""}
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, indent=2, ensure_ascii=False)
else:
    settings = {"language": "en", "default_model": ""}
    with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(settings, f, indent=2, ensure_ascii=False)

current_model = settings.get("default_model", "")
model_lock = Lock()

 
OLLAMA_API = "http://localhost:11434"

 
if os.path.exists(LAST_MODEL_FILE):
    with open(LAST_MODEL_FILE, 'r', encoding='utf-8') as f:
        current_model = f.read().strip()

app.logger.info("Current model: %s", current_model)

@app.route('/')
def index():
    return send_from_directory('.', 'index3.html')

@app.route('/chats', methods=['GET'])
def list_chats():
    try:
        chats = [f.replace(".json", "") for f in os.listdir(CHATS_DIR) if f.endswith(".json")]
        return jsonify(chats)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/chats/<chat_id>', methods=['GET', 'PUT'])
def chat_handler(chat_id):
     
     
    chat_file = os.path.join(CHATS_DIR, f"{chat_id}.json")
    if request.method == 'GET':
        try:
            if os.path.exists(chat_file):
                with open(chat_file, 'r', encoding='utf-8') as f:
                    chat_data = json.load(f)
                return jsonify(chat_data)
            else:
                return jsonify({"error": "Chat not found"}), 404
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    else:
        try:
            data = request.json
            with open(chat_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            return jsonify({"status": "success"})
        except Exception as e:
            return jsonify({"error": str(e)}), 500

@app.route('/delete-chat/<chat_id>', methods=['DELETE'])
def delete_chat(chat_id):
     
    chat_file = os.path.join(CHATS_DIR, f"{chat_id}.json")
    if os.path.exists(chat_file):
        try:
            os.remove(chat_file)
            return jsonify({"status": "success"})
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    else:
        return jsonify({"error": "Chat not found"}), 404

@app.route('/generate', methods=['POST'])
def generate():
     
    try:
        data = request.json
        if "modelhs" in data:
            model = data["modelhs"][-1] if data["modelhs"] else current_model
        else:
            model = data.get('model', current_model)
        if "history" in data:
            messages = data["history"]
        else:
            messages = data.get('messages', [])
        payload = {
            "model": model,
            "messages": messages,
            "stream": False
        }
        resp = requests.post(f"{OLLAMA_API}/api/chat", json=payload, timeout=120)
        return jsonify(resp.json())
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/generate-stream', methods=['POST'])
def generate_stream():
     
    try:
        data = request.json
        if "modelhs" in data:
            model = data["modelhs"][-1] if data["modelhs"] else current_model
        else:
            model = data.get('model', current_model)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = data.get('message', '')
        tools_enabled = data.get('tools_enabled', False)
        
        if "history" in data:
            messages = data["history"]
        else:
            messages = data.get('messages', [])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if user_message:
            messages.append({"role": "user", "content": user_message})
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if tools_enabled:
            system_message = {
                "role": "system", 
                "content": """–¢—ã AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º. –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:

üìÅ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:
- list_files: –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫
- read_file: —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
- create_file: —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
- edit_file: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
- delete_file: —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
- create_directory: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫

üíª –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
- execute_command: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
- get_system_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
- manage_processes: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
- network_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
            }
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if not messages or messages[0].get("role") != "system":
                messages.insert(0, system_message)
        
        payload = {
            "model": model,
            "messages": messages,
            "stream": True,
            "keep_alive": "30m"
        }
        resp = requests.post(f"{OLLAMA_API}/api/chat", json=payload, stream=True, timeout=120)
        def generate():
            for line in resp.iter_lines():
                if line:
                    yield f"data: {line.decode('utf-8')}\n\n"
        return Response(generate(), mimetype='text/event-stream')
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/switch-model', methods=['POST'])
def switch_model():
     
    global current_model
    try:
        data = request.json
        model = data.get('model', '')
        with model_lock:
            current_model = model
            with open(LAST_MODEL_FILE, 'w', encoding='utf-8') as f:
                f.write(model)
        return jsonify({"status": "success", "model": model})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/installed-models', methods=['GET'])
def get_installed_models():
     
    try:
        result = subprocess.run(["ollama", "list"], capture_output=True, text=True)
        if result.returncode != 0:
            raise Exception(result.stderr)
        output = result.stdout.strip()
        lines = output.splitlines()
        if lines and "NAME" in lines[0].upper():
            lines = lines[1:]
        models = [line.strip().split()[0] for line in lines if line.strip()]
        return jsonify(models)
    except Exception as e:
        app.logger.error("Error syncing with ollama list: %s", e)
        return jsonify([])

@app.route('/delete-model', methods=['POST'])
def delete_model():
     
    data = request.json
    model = data.get('model')
    try:
        result = subprocess.run(["ollama", "rm", model], capture_output=True, text=True)
        if result.returncode != 0:
            app.logger.error("Error deleting model: %s", result.stderr)
            return jsonify({"status": "error", "message": result.stderr}), 500
        return jsonify({"status": "success"})
    except Exception as e:
        app.logger.error("Exception deleting model: %s", e)
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/install-model-stream', methods=['POST'])
def install_model_stream():
     
    data = request.json
    model_name = data.get("model")
    if not model_name:
        return jsonify({"error": "No model name provided"}), 400

    command = ["ollama", "run", model_name]
    app.logger.info("Installing model via command: %s", " ".join(command))

    def generate():
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        for line in iter(process.stdout.readline, ""):
            yield f"data: {line.strip()}\n\n"
        process.stdout.close()
        process.wait()
        yield "data: DONE\n\n"

    return Response(generate(), mimetype='text/event-stream')

@app.route('/settings', methods=['GET', 'POST'])
def settings_handler():
     
    global settings, current_model
    if request.method == 'GET':
        return jsonify(settings)
    else:
        try:
            new_settings = request.json
            settings.update(new_settings)
            with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)

            if "default_model" in new_settings:
                current_model = new_settings["default_model"]
                with open(LAST_MODEL_FILE, 'w', encoding='utf-8') as f:
                    f.write(current_model)

            return jsonify({"status": "success"})
        except Exception as e:
            return jsonify({"error": str(e)}), 500

# Tools API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
@app.route('/api/tools', methods=['POST'])
@app.route('/tools', methods=['POST'])
def execute_tool():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    try:
        data = request.get_json()
        tool_name = data.get('tool_name') or data.get('tool')  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        parameters = data.get('parameters', {})
        
        print(f"[DEBUG] Tool request: {tool_name} with parameters: {parameters}")
        
        if tool_name == 'list_drives':
            """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
            drives = []
            
            if platform.system() == 'Windows':
                import string
                for letter in string.ascii_uppercase:
                    drive = f"{letter}:\\"
                    if os.path.exists(drive):
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∏—Å–∫–∞
                            os.listdir(drive)
                            drives.append(f"üíæ {drive}")
                        except (PermissionError, OSError):
                            drives.append(f"üîí {drive} (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)")
            else:
                # Unix-–ø–æ–¥–æ–±–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                drives.append("üíæ / (–∫–æ—Ä–Ω–µ–≤–∞—è —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                mount_points = ['/mnt', '/media', '/Volumes', '/home', '/usr', '/var', '/tmp']
                for mount in mount_points:
                    if os.path.exists(mount) and os.path.isdir(mount):
                        drives.append(f"üìÅ {mount}")
            
            drives_list = '\n'.join(drives) if drives else '–î–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
            return jsonify({'result': f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–ø–∫–∏:\n{drives_list}'})
        
        elif tool_name == 'create_file':
            filename = parameters.get('filename')
            content = parameters.get('content', '')
            
            if not filename:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞'}), 400
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            if not os.path.isabs(filename):
                filename = os.path.abspath(filename)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            os.makedirs(os.path.dirname(filename), exist_ok=True)
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return jsonify({'result': f'–§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ'})
        
        elif tool_name == 'read_file':
            filename = parameters.get('filename')
            
            if not filename:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞'}), 400
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            if not os.path.isabs(filename):
                filename = os.path.abspath(filename)
            
            if not os.path.exists(filename):
                return jsonify({'error': f'–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
                return jsonify({'result': f'–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {filename}:\n{content}'})
            except UnicodeDecodeError:
                return jsonify({'error': f'–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filename} (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª)'}), 400
        
        elif tool_name == 'create_directory':
            dirname = parameters.get('dirname')
            
            if not dirname:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–∞–ø–∫–∏'}), 400
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            if not os.path.isabs(dirname):
                dirname = os.path.abspath(dirname)
            
            os.makedirs(dirname, exist_ok=True)
            
            return jsonify({'result': f'–ü–∞–ø–∫–∞ {dirname} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'})
        
        elif tool_name == 'list_files':
            path = parameters.get('path')
            
            print(f"[DEBUG] list_files called with path: {path}")
            
            # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–µ–Ω—å —Å–∏—Å—Ç–µ–º—ã
            if not path:
                if platform.system() == 'Windows':
                    path = 'C:\\'
                else:
                    path = '/'
            
            print(f"[DEBUG] Using path: {path}")
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            if not os.path.isabs(path):
                path = os.path.abspath(path)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è Windows
            path = os.path.normpath(path)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ Windows
            if platform.system() == 'Windows' and len(path) == 2 and path[1] == ':':
                path = path + '\\'
            
            print(f"[DEBUG] Final path: {path}")
            
            if not os.path.exists(path):
                return jsonify({'error': f'–ü—É—Ç—å {path} –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
            if not os.path.isdir(path):
                return jsonify({'error': f'{path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π'}), 400
            
            files = []
            try:
                print(f"[DEBUG] Starting to list directory: {path}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ –≤ –∫–æ—Ä–Ω–µ
                parent_path = os.path.dirname(path)
                if parent_path != path:  # –ù–µ –≤ –∫–æ—Ä–Ω–µ
                    files.append('üìÅ .. (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞)')
                
                print(f"[DEBUG] About to call os.listdir({path})")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                items = os.listdir(path)
                if path == '/' or path == 'C:\\':
                    items = items[:20]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ—Ä–Ω—è
                
                print(f"[DEBUG] Got {len(items)} items")
                
                for item in items:
                    item_path = os.path.join(path, item)
                    try:
                        if os.path.isfile(item_path):
                            size = os.path.getsize(item_path)
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                            if size < 1024:
                                size_str = f"{size} B"
                            elif size < 1024*1024:
                                size_str = f"{size/1024:.1f} KB"
                            elif size < 1024*1024*1024:
                                size_str = f"{size/(1024*1024):.1f} MB"
                            else:
                                size_str = f"{size/(1024*1024*1024):.1f} GB"
                            files.append(f'üìÑ {item} ({size_str})')
                        elif os.path.isdir(item_path):
                            files.append(f'üìÅ {item}/')
                    except (PermissionError, OSError):
                        files.append(f'üîí {item} (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)')
                
                files_list = '\n'.join(files) if files else '–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞'
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—É—Ç–∏
                result_text = f'üìç –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {path}\n'
                result_text += f'üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(files)}\n'
                result_text += '‚îÄ' * 50 + '\n'
                result_text += files_list
                
                print(f"[DEBUG] Returning result for {path}")
                return jsonify({'result': result_text, 'current_path': path, 'items': files})
            except PermissionError:
                print(f"[DEBUG] Permission error for {path}")
                return jsonify({'error': f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ {path}'}), 403
            except Exception as e:
                print(f"[DEBUG] Exception in list_files: {e}")
                return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {path}: {str(e)}'}), 500
        
        elif tool_name == 'delete_file':
            filename = parameters.get('filename')
            
            if not filename:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞'}), 400
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            if not os.path.isabs(filename):
                filename = os.path.abspath(filename)
            
            if not os.path.exists(filename):
                return jsonify({'error': f'–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
            try:
                if os.path.isfile(filename):
                    os.remove(filename)
                    return jsonify({'result': f'–§–∞–π–ª {filename} —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'})
                elif os.path.isdir(filename):
                    import shutil
                    shutil.rmtree(filename)
                    return jsonify({'result': f'–ü–∞–ø–∫–∞ {filename} —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'})
                else:
                    return jsonify({'error': f'{filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º –∏–ª–∏ –ø–∞–ø–∫–æ–π'}), 400
            except PermissionError:
                return jsonify({'error': f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è {filename}'}), 403
        
        elif tool_name == 'edit_file':
            filename = parameters.get('filename')
            content = parameters.get('content', '')
            
            if not filename:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞'}), 400
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            if not os.path.isabs(filename):
                filename = os.path.abspath(filename)
            
            if not os.path.exists(filename):
                return jsonify({'error': f'–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
            if not os.path.isfile(filename):
                return jsonify({'error': f'{filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º'}), 400
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                backup_filename = filename + '.backup'
                import shutil
                shutil.copy2(filename, backup_filename)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                return jsonify({'result': f'–§–∞–π–ª {filename} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_filename})'})
            except Exception as e:
                return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}'}), 500
        
        elif tool_name == 'execute_command':
            command = parameters.get('command')
            
            if not command:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'}), 400
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
                if platform.system() == 'Windows':
                    result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=30)
                else:
                    result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=30)
                
                output = result.stdout if result.stdout else result.stderr
                return_code = result.returncode
                
                return jsonify({
                    'result': f'–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_code})\n–í—ã–≤–æ–¥:\n{output}',
                    'return_code': return_code,
                    'stdout': result.stdout,
                    'stderr': result.stderr
                })
            except subprocess.TimeoutExpired:
                return jsonify({'error': '–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (30 —Å–µ–∫)'}), 408
            except Exception as e:
                return jsonify({'error': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}'}), 500
        
        elif tool_name == 'run_application':
            app_path = parameters.get('app_path')
            app_name = parameters.get('app_name')
            arguments = parameters.get('arguments', '')
            
            if not app_path and not app_name:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'}), 400
            
            try:
                if app_path:
                    # –ó–∞–ø—É—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏
                    if platform.system() == 'Windows':
                        subprocess.Popen([app_path] + arguments.split() if arguments else [app_path])
                    else:
                        subprocess.Popen([app_path] + arguments.split() if arguments else [app_path])
                    return jsonify({'result': f'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_path} –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'})
                else:
                    # –ó–∞–ø—É—Å–∫ –ø–æ –∏–º–µ–Ω–∏ (–ø–æ–∏—Å–∫ –≤ PATH)
                    if platform.system() == 'Windows':
                        subprocess.Popen([app_name] + arguments.split() if arguments else [app_name], shell=True)
                    else:
                        subprocess.Popen([app_name] + arguments.split() if arguments else [app_name])
                    return jsonify({'result': f'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'})
            except FileNotFoundError:
                return jsonify({'error': f'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {app_path or app_name}'}), 404
            except Exception as e:
                return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}'}), 500
        
        elif tool_name == 'get_system_info':
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
                system_info = {
                    'os': platform.system(),
                    'os_version': platform.version(),
                    'architecture': platform.architecture()[0],
                    'processor': platform.processor(),
                    'hostname': platform.node(),
                    'python_version': platform.python_version(),
                    'cpu_count': psutil.cpu_count(),
                    'cpu_percent': psutil.cpu_percent(interval=1),
                    'memory_total': f"{psutil.virtual_memory().total / (1024**3):.2f} GB",
                    'memory_available': f"{psutil.virtual_memory().available / (1024**3):.2f} GB",
                    'memory_percent': psutil.virtual_memory().percent,
                    'disk_usage': []
                }
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö
                for partition in psutil.disk_partitions():
                    try:
                        usage = psutil.disk_usage(partition.mountpoint)
                        system_info['disk_usage'].append({
                            'device': partition.device,
                            'mountpoint': partition.mountpoint,
                            'fstype': partition.fstype,
                            'total': f"{usage.total / (1024**3):.2f} GB",
                            'used': f"{usage.used / (1024**3):.2f} GB",
                            'free': f"{usage.free / (1024**3):.2f} GB",
                            'percent': f"{(usage.used / usage.total) * 100:.1f}%"
                        })
                    except PermissionError:
                        continue
                
                info_text = f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:
–û–°: {system_info['os']} {system_info['os_version']}
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {system_info['architecture']}
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {system_info['processor']}
–ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {system_info['hostname']}
Python: {system_info['python_version']}

–†–µ—Å—É—Ä—Å—ã:
CPU: {system_info['cpu_count']} —è–¥–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ {system_info['cpu_percent']}%
–ü–∞–º—è—Ç—å: {system_info['memory_available']} –¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑ {system_info['memory_total']} ({system_info['memory_percent']}% –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

–î–∏—Å–∫–∏:"""
                
                for disk in system_info['disk_usage']:
                    info_text += f"\n{disk['device']} ({disk['fstype']}): {disk['used']} –∏–∑ {disk['total']} ({disk['percent']})"
                
                return jsonify({'result': info_text, 'data': system_info})
            except Exception as e:
                return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {str(e)}'}), 500
        
        elif tool_name == 'manage_processes':
            action = parameters.get('action')  # 'list', 'kill', 'info'
            process_name = parameters.get('process_name')
            process_id = parameters.get('process_id')
            
            if not action:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (list, kill, info)'}), 400
            
            try:
                if action == 'list':
                    processes = []
                    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                        try:
                            processes.append({
                                'pid': proc.info['pid'],
                                'name': proc.info['name'],
                                'cpu_percent': proc.info['cpu_percent'],
                                'memory_percent': proc.info['memory_percent']
                            })
                        except (psutil.NoSuchProcess, psutil.AccessDenied):
                            continue
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU
                    processes.sort(key=lambda x: x['cpu_percent'] or 0, reverse=True)
                    
                    result_text = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (—Ç–æ–ø 20 –ø–æ CPU):\n"
                    for proc in processes[:20]:
                        result_text += f"PID: {proc['pid']}, –ò–º—è: {proc['name']}, CPU: {proc['cpu_percent']:.1f}%, –ü–∞–º—è—Ç—å: {proc['memory_percent']:.1f}%\n"
                    
                    return jsonify({'result': result_text, 'processes': processes[:20]})
                
                elif action == 'kill':
                    if not process_id and not process_name:
                        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–ª–∏ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'}), 400
                    
                    killed_processes = []
                    
                    if process_id:
                        try:
                            proc = psutil.Process(int(process_id))
                            proc_name = proc.name()
                            proc.terminate()
                            killed_processes.append(f"PID {process_id} ({proc_name})")
                        except psutil.NoSuchProcess:
                            return jsonify({'error': f'–ü—Ä–æ—Ü–µ—Å—Å —Å PID {process_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
                        except psutil.AccessDenied:
                            return jsonify({'error': f'–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ PID {process_id}'}), 403
                    
                    if process_name:
                        for proc in psutil.process_iter(['pid', 'name']):
                            try:
                                if proc.info['name'].lower() == process_name.lower():
                                    proc.terminate()
                                    killed_processes.append(f"PID {proc.info['pid']} ({proc.info['name']})")
                            except (psutil.NoSuchProcess, psutil.AccessDenied):
                                continue
                    
                    if killed_processes:
                        return jsonify({'result': f'–ó–∞–≤–µ—Ä—à–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã: {", ".join(killed_processes)}'})
                    else:
                        return jsonify({'error': f'–ü—Ä–æ—Ü–µ—Å—Å—ã —Å –∏–º–µ–Ω–µ–º "{process_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'}), 404
                
                elif action == 'info':
                    if not process_id and not process_name:
                        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–ª–∏ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}), 400
                    
                    target_proc = None
                    
                    if process_id:
                        try:
                            target_proc = psutil.Process(int(process_id))
                        except psutil.NoSuchProcess:
                            return jsonify({'error': f'–ü—Ä–æ—Ü–µ—Å—Å —Å PID {process_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
                    elif process_name:
                        for proc in psutil.process_iter(['pid', 'name']):
                            try:
                                if proc.info['name'].lower() == process_name.lower():
                                    target_proc = psutil.Process(proc.info['pid'])
                                    break
                            except (psutil.NoSuchProcess, psutil.AccessDenied):
                                continue
                    
                    if not target_proc:
                        return jsonify({'error': f'–ü—Ä–æ—Ü–µ—Å—Å "{process_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
                    
                    try:
                        proc_info = {
                            'pid': target_proc.pid,
                            'name': target_proc.name(),
                            'status': target_proc.status(),
                            'cpu_percent': target_proc.cpu_percent(),
                            'memory_percent': target_proc.memory_percent(),
                            'create_time': time.ctime(target_proc.create_time()),
                            'num_threads': target_proc.num_threads(),
                        }
                        
                        try:
                            proc_info['exe'] = target_proc.exe()
                            proc_info['cwd'] = target_proc.cwd()
                            proc_info['cmdline'] = ' '.join(target_proc.cmdline())
                        except psutil.AccessDenied:
                            proc_info['exe'] = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞'
                            proc_info['cwd'] = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞'
                            proc_info['cmdline'] = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞'
                        
                        info_text = f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ:
PID: {proc_info['pid']}
–ò–º—è: {proc_info['name']}
–°—Ç–∞—Ç—É—Å: {proc_info['status']}
CPU: {proc_info['cpu_percent']:.1f}%
–ü–∞–º—è—Ç—å: {proc_info['memory_percent']:.1f}%
–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {proc_info['create_time']}
–ü–æ—Ç–æ–∫–æ–≤: {proc_info['num_threads']}
–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {proc_info['exe']}
–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {proc_info['cwd']}
–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {proc_info['cmdline']}"""
                        
                        return jsonify({'result': info_text, 'process_info': proc_info})
                    except psutil.AccessDenied:
                        return jsonify({'error': '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ'}), 403
                
                else:
                    return jsonify({'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}'}), 400
                    
            except Exception as e:
                return jsonify({'error': f'–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏: {str(e)}'}), 500
        
        elif tool_name == 'network_info':
            try:
                network_info = {
                    'interfaces': [],
                    'connections': []
                }
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
                for interface, addrs in psutil.net_if_addrs().items():
                    interface_info = {'name': interface, 'addresses': []}
                    for addr in addrs:
                        interface_info['addresses'].append({
                            'family': str(addr.family),
                            'address': addr.address,
                            'netmask': addr.netmask,
                            'broadcast': addr.broadcast
                        })
                    network_info['interfaces'].append(interface_info)
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                for conn in psutil.net_connections(kind='inet')[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10
                    try:
                        network_info['connections'].append({
                            'fd': conn.fd,
                            'family': str(conn.family),
                            'type': str(conn.type),
                            'local_address': f"{conn.laddr.ip}:{conn.laddr.port}" if conn.laddr else None,
                            'remote_address': f"{conn.raddr.ip}:{conn.raddr.port}" if conn.raddr else None,
                            'status': conn.status,
                            'pid': conn.pid
                        })
                    except:
                        continue
                
                result_text = "–°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:\n"
                for iface in network_info['interfaces']:
                    result_text += f"{iface['name']}:\n"
                    for addr in iface['addresses']:
                        result_text += f"  {addr['address']} ({addr['family']})\n"
                
                result_text += "\n–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ç–æ–ø 10):\n"
                for conn in network_info['connections']:
                    result_text += f"{conn['local_address']} -> {conn['remote_address']} ({conn['status']})\n"
                
                return jsonify({'result': result_text, 'network_data': network_info})
            except Exception as e:
                return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}'}), 500
        
        elif tool_name == 'manage_services':
            action = parameters.get('action')  # 'list', 'start', 'stop', 'restart', 'status'
            service_name = parameters.get('service_name')
            
            if not action:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (list, start, stop, restart, status)'}), 400
            
            try:
                if action == 'list':
                    if platform.system() == 'Windows':
                        result = subprocess.run(['sc', 'query'], capture_output=True, text=True, timeout=30)
                        return jsonify({'result': f'–°–ø–∏—Å–æ–∫ —Å–ª—É–∂–± Windows:\n{result.stdout}'})
                    else:
                        result = subprocess.run(['systemctl', 'list-units', '--type=service'], capture_output=True, text=True, timeout=30)
                        return jsonify({'result': f'–°–ø–∏—Å–æ–∫ —Å–ª—É–∂–± Linux:\n{result.stdout}'})
                
                elif action in ['start', 'stop', 'restart', 'status']:
                    if not service_name:
                        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å–ª—É–∂–±—ã'}), 400
                    
                    if platform.system() == 'Windows':
                        if action == 'start':
                            result = subprocess.run(['sc', 'start', service_name], capture_output=True, text=True, timeout=30)
                        elif action == 'stop':
                            result = subprocess.run(['sc', 'stop', service_name], capture_output=True, text=True, timeout=30)
                        elif action == 'status':
                            result = subprocess.run(['sc', 'query', service_name], capture_output=True, text=True, timeout=30)
                        elif action == 'restart':
                            subprocess.run(['sc', 'stop', service_name], capture_output=True, text=True, timeout=30)
                            time.sleep(2)
                            result = subprocess.run(['sc', 'start', service_name], capture_output=True, text=True, timeout=30)
                    else:
                        result = subprocess.run(['systemctl', action, service_name], capture_output=True, text=True, timeout=30)
                    
                    return jsonify({
                        'result': f'–î–µ–π—Å—Ç–≤–∏–µ "{action}" –¥–ª—è —Å–ª—É–∂–±—ã "{service_name}":\n{result.stdout}\n{result.stderr}',
                        'return_code': result.returncode
                    })
                
                else:
                    return jsonify({'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}'}), 400
                    
            except subprocess.TimeoutExpired:
                return jsonify({'error': '–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'}), 408
            except Exception as e:
                return jsonify({'error': f'–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª—É–∂–±–∞–º–∏: {str(e)}'}), 500
        
        elif tool_name == 'file_operations':
            operation = parameters.get('operation')  # 'copy', 'move', 'search', 'permissions'
            source = parameters.get('source')
            destination = parameters.get('destination')
            pattern = parameters.get('pattern')
            
            if not operation:
                return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è (copy, move, search, permissions)'}), 400
            
            try:
                if operation == 'copy':
                    if not source or not destination:
                        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'}), 400
                    
                    source = os.path.abspath(source)
                    destination = os.path.abspath(destination)
                    
                    if os.path.isfile(source):
                        import shutil
                        shutil.copy2(source, destination)
                        return jsonify({'result': f'–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {source} -> {destination}'})
                    elif os.path.isdir(source):
                        import shutil
                        shutil.copytree(source, destination)
                        return jsonify({'result': f'–ü–∞–ø–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {source} -> {destination}'})
                    else:
                        return jsonify({'error': f'–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}'}), 404
                
                elif operation == 'move':
                    if not source or not destination:
                        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'}), 400
                    
                    source = os.path.abspath(source)
                    destination = os.path.abspath(destination)
                    
                    import shutil
                    shutil.move(source, destination)
                    return jsonify({'result': f'–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {source} -> {destination}'})
                
                elif operation == 'search':
                    if not source or not pattern:
                        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —à–∞–±–ª–æ–Ω'}), 400
                    
                    source = os.path.abspath(source)
                    found_files = []
                    
                    for root, dirs, files in os.walk(source):
                        for file in files:
                            if pattern.lower() in file.lower():
                                found_files.append(os.path.join(root, file))
                        if len(found_files) >= 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            break
                    
                    result_text = f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å —à–∞–±–ª–æ–Ω–æ–º '{pattern}' –≤ {source}:\n"
                    result_text += '\n'.join(found_files[:50])
                    if len(found_files) >= 50:
                        result_text += f"\n... –∏ –µ—â–µ {len(found_files) - 50} —Ñ–∞–π–ª–æ–≤"
                    
                    return jsonify({'result': result_text, 'found_files': found_files[:50]})
                
                elif operation == 'permissions':
                    if not source:
                        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É'}), 400
                    
                    source = os.path.abspath(source)
                    
                    if not os.path.exists(source):
                        return jsonify({'error': f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}'}), 404
                    
                    stat_info = os.stat(source)
                    permissions = oct(stat_info.st_mode)[-3:]
                    
                    result_text = f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {source}:\n"
                    result_text += f"–í–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {permissions}\n"
                    result_text += f"–†–∞–∑–º–µ—Ä: {stat_info.st_size} –±–∞–π—Ç\n"
                    result_text += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {time.ctime(stat_info.st_mtime)}\n"
                    result_text += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø: {time.ctime(stat_info.st_atime)}"
                    
                    return jsonify({'result': result_text, 'permissions': permissions, 'size': stat_info.st_size})
                
                else:
                    return jsonify({'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}'}), 400
                    
            except Exception as e:
                return jsonify({'error': f'–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}'}), 500
        
        else:
            return jsonify({'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}'}), 400
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {str(e)}'}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Ollama Tools...")
    print("üåê Ollama —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:12000")
    print("üîß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    print("   üìÅ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:")
    print("      - list_drives: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∏—Å–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
    print("      - create_file: —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π)")
    print("      - read_file: —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–ª—é–±—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ)")
    print("      - edit_file: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π)")
    print("      - create_directory: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫")
    print("      - list_files: –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫ (—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π)")
    print("      - delete_file: —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫")
    print("   üíª –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    print("      - execute_command: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    print("      - run_application: –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
    print("      - get_system_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    print("      - manage_processes: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ (list/kill/info)")
    print("      - network_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏")
    print("      - manage_services: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–∞–º–∏ (list/start/stop/restart/status)")
    print("      - file_operations: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (copy/move/search/permissions)")
    print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:11434")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: AI –∏–º–µ–µ—Ç –ü–û–õ–ù–´–ô –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä—É!")
    print("üóÇÔ∏è  –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å/–∏–∑–º–µ–Ω—è—Ç—å —Ñ–∞–π–ª—ã, –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã, —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏")
    print("üîí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ AI –º–æ–¥–µ–ª—è–º–∏!")
    
    app.run(host='0.0.0.0', port=12000, debug=False, threaded=True)
